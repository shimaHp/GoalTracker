@page "/goals"
@using System.Linq

<PageTitle>Goal Tracker Dashboard</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="mb-0">Your Goals</h1>
                <button class="btn btn-primary" @onclick="CreateGoal">
                    <i class="bi bi-plus-circle me-2"></i>Create New Goal
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Message
            <button type="button" class="btn-close" @onclick="() => Message = string.Empty" aria-label="Close"></button>
        </div>
    }

    <!-- Search and Controls -->
    <div class="row mb-3">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Search goals..." @bind="searchPhrase" @onkeypress="OnSearchKeyPress" />
        </div>
        <div class="col-md-2">
            <select class="form-control" @onchange="OnPageSizeChanged">
                <option value="5" selected="@(pageSize == 5)">5 per page</option>
                <option value="10" selected="@(pageSize == 10)">10 per page</option>
                <option value="20" selected="@(pageSize == 20)">20 per page</option>
                <option value="50" selected="@(pageSize == 50)">50 per page</option>
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary" @onclick="SearchGoals">Search</button>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12 col-md-4 mb-3">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="text-muted mb-1">Total Goals</h5>
                            <h2 class="mb-0">@(pagedGoals?.TotalCount ?? 0)</h2>
                        </div>
                        <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                            <i class="bi bi-list-check text-white fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 mb-3">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="text-muted mb-1">Completed</h5>
                            <h2 class="mb-0">@(pagedGoals?.Items?.Count(g => g.Status == GoalStatus.Completed) ?? 0)</h2>
                        </div>
                        <div class="bg-success rounded-circle d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                            <i class="bi bi-check-circle text-white fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 mb-3">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="text-muted mb-1">In Progress</h5>
                            <h2 class="mb-0">@(pagedGoals?.Items?.Count(g => g.Status == GoalStatus.InProgress) ?? 0)</h2>
                        </div>
                        <div class="bg-warning rounded-circle d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                            <i class="bi bi-hourglass-split text-white fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Goals List -->
    <div class="card">
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else if (pagedGoals?.Items != null && pagedGoals.Items.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th scope="col" style="cursor: pointer;" @onclick="@(() => SortBy("Title"))">
                                    Title
                                    @if (sortBy == "Title")
                                    {
                                        <i class="bi bi-arrow-@(sortDirection == 0 ? "up" : "down")"></i>
                                    }
                                </th>
                                <th scope="col">Description</th>
                                <th scope="col" style="cursor: pointer;" @onclick="@(() => SortBy("Status"))">
                                    Status
                                    @if (sortBy == "Status")
                                    {
                                        <i class="bi bi-arrow-@(sortDirection == 0 ? "up" : "down")"></i>
                                    }
                                </th>
                                <th scope="col" style="cursor: pointer;" @onclick="@(() => SortBy("CreatedDate"))">
                                    Created Date
                                    @if (sortBy == "CreatedDate")
                                    {
                                        <i class="bi bi-arrow-@(sortDirection == 0 ? "up" : "down")"></i>
                                    }
                                </th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var goal in pagedGoals.Items)
                            {
                                <tr>
                                    <td>
                                        <strong>@goal.Title</strong>
                                    </td>
                                    <td>
                                        <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@goal.Description">
                                            @goal.Description
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@GetStatusColor(goal.Status)">
                                            @goal.Status.ToString()
                                        </span>
                                    </td>
                                    <td>
                                        <small class="text-muted">@goal.CreatedDate.ToString("MMM dd, yyyy")</small>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => ViewGoal(goal.Id)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => EditGoal(goal.Id)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteGoal(goal.Id)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <!-- Add this after your table -->
                    <!-- Add this after your table -->
                    <!-- Add this after your table -->
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            @if (totalRecords > 0)
                            {
                                <span>Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, totalRecords)) of @totalRecords records</span>
                            }
                            else
                            {
                                <span>No records found</span>
                            }
                        </div>

                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <!-- Previous button -->
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        Previous
                                    </button>
                                </li>

                                <!-- Page numbers -->
                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    int pageNumber = i; // Capture for lambda
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">
                                            @pageNumber
                                        </button>
                                    </li>
                                }

                                <!-- Next button -->
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                        Next
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="text-muted mt-2">No goals found</h4>
                    <p class="text-muted">Start by creating your first goal!</p>
                    <button class="btn btn-primary" @onclick="CreateGoal">
                        <i class="bi bi-plus-circle me-2"></i>Create Your First Goal
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- Pagination Controls -->
    @if (pagedGoals != null && pagedGoals.TotalCount > 0)
    {
        <nav aria-label="Goals pagination">
            <ul class="pagination justify-content-center">
                <!-- Previous Page -->
                <li class="page-item @(pagedGoals.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link" @onclick="() => GoToPage(currentPage - 1)" href="#" tabindex="-1">Previous</a>
                </li>

                <!-- Page Numbers -->
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedGoals.TotalPages, currentPage + 2); i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <a class="page-link" @onclick="() => GoToPage(pageNumber)" href="#">@pageNumber</a>
                    </li>
                }

                <!-- Next Page -->
                <li class="page-item @(pagedGoals.HasNextPage ? "" : "disabled")">
                    <a class="page-link" @onclick="() => GoToPage(currentPage + 1)" href="#">Next</a>
                </li>
            </ul>
        </nav>

        <!-- Pagination Info -->
        <div class="text-center mt-2">
            <small class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, pagedGoals.TotalCount) of @pagedGoals.TotalCount results
            </small>
        </div>
    }
</div>
